using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    #LibraryProduct(prefix, ["libLLVM"], :libLLVM),
    LibraryProduct(prefix, ["libclang"], :libclang),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/staticfloat/LLVMBuilder/releases/download/v6.0.1-4+nowasm"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.aarch64-linux-gnu-gcc4.tar.gz", "e736ef4f757eec638bdf31c954ccfe78a4e0e5ecef8d9471d1148a7487908ede"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.aarch64-linux-gnu-gcc7.tar.gz", "8825b2ea1c17c7a25a42e8bd1d8b40f043378c7bc64ae4eaedc99bda7328bff2"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.aarch64-linux-gnu-gcc8.tar.gz", "74640a891109596898bb095afc7d73686b1226a5df4c2e50a55222ab8f08d99a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.arm-linux-gnueabihf-gcc4.tar.gz", "3105cda51f596dad3f162c3cd9d538909734c5c04027d5fa09995e6d00826eb7"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.arm-linux-gnueabihf-gcc7.tar.gz", "dfa70e3f2dd97ef716f5ced19adabb05441fd8bed78c03ec7922285c77223a6b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.arm-linux-gnueabihf-gcc8.tar.gz", "a128811100b756d158546f465e9d493de964281c3f689d4a5c7ec84ecb85f0b0"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.i686-linux-gnu-gcc4.tar.gz", "cf94e6fa759512ced20ef5017b019ad204a86b06382311deca61d0bb5c912cab"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.i686-linux-gnu-gcc7.tar.gz", "08ccebf5c3f5434db4d35fd614c1e2b946952ca503a15a68b67c398cdbad3901"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.i686-linux-gnu-gcc8.tar.gz", "8b184a7959b8a8f946e56e020af3a4876beef82512345ac0325885797b403776"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.i686-w64-mingw32-gcc4.tar.gz", "ed508753e4759b237278cd3d16011b1c473779e628ccd0cd5cb7b766f8806b86"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.i686-w64-mingw32-gcc7.tar.gz", "d1f68a299472d69278ae85f892aadd86357a27bb8cb2dbad8138d6a2bd939d86"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.i686-w64-mingw32-gcc8.tar.gz", "14da70b3682631f21f15bab6fac1daf70016c7d1e65557d8ea2278b3b82594d6"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.powerpc64le-linux-gnu-gcc4.tar.gz", "32c2cb693b676b7411e3d8304a4eec46abc64e593b2a625247b04cf6170e5de4"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.powerpc64le-linux-gnu-gcc7.tar.gz", "f6a83943590389a46024755c25a0f16da610835fc17f409c3b396dd4ac8983be"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.powerpc64le-linux-gnu-gcc8.tar.gz", "5cf79603845f0fbcfca35c385b7672d16e857f895f9d774da2f54a8c289e6b8e"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-apple-darwin14-gcc4.tar.gz", "82b4f1969e431a4480b2523827797d3799b1f46ea756cae79d21c91ca767703d"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-apple-darwin14-gcc7.tar.gz", "7262e450e2856964c1b77730a95e8939df8706eedd8f93c3da79b52a6e92b9e8"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-apple-darwin14-gcc8.tar.gz", "34fa3d62a1a68947e30fae90186f00f7a263bbf84cf429c9108534d3c90360bb"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-linux-gnu-gcc4.tar.gz", "0908da7bf127059b786724d29d209ffdf1a9f8b03ecbd1a53b31cbe072bb7012"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-linux-gnu-gcc7.tar.gz", "cefc74d021cc4c197a98a43d8f4b95c67d25ba3220495d253aa442e7f5ce2ed2"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-linux-gnu-gcc8.tar.gz", "60612ecde1e2af278c12fe8973b3964a0d48c973c6350dc2e6448f5099190e9d"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-linux-musl-gcc4.tar.gz", "981692d86e45b791a08954dd83ccff8b45de9e4d89ecc90d44dfe2b6063d48ee"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-linux-musl-gcc7.tar.gz", "743f23bdef90fa6519393a33b3c5a022d8b645f5fa37da7706ada450770b85f4"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-linux-musl-gcc8.tar.gz", "c036a913df8b2665800453ad5f543f8e37c6a0ec9065148d92130d1922a087ac"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-w64-mingw32-gcc4.tar.gz", "295fb54dc4f515fa05f3f413e8d2a49e17e31cc9a3bcfb0dcf360fdf88ad5340"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-w64-mingw32-gcc7.tar.gz", "02afc6313e267e8053484df4648c1028114f10888d1b55549ad71d79870e564a"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/LLVM.v6.0.1.x86_64-w64-mingw32-gcc8.tar.gz", "927ccba173dbf3f598856f9186fb8d1eade78a11a8e854eae8844617741624d8"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
@static if Sys.iswindows()
    dl_info = download_info[Windows(:x86_64, compiler_abi=CompilerABI(:gcc7))]
else
    dl_info = choose_download(download_info, platform_key_abi())
end

if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    @static if Sys.iswindows()
        install(dl_info...; prefix=prefix, force=true, verbose=verbose, ignore_platform=true)
    else
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
